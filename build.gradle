buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath 'gradle.plugin.com.github.jengelman.gradle.plugins:shadow:7.0.0'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'com.github.johnrengelman.shadow'
apply from: "https://moddingtutorials.org/applesilicon.gradle"

version = "${mc_version}-${mod_version}"
group = 'de.morrien.nekeys'
archivesBaseName = 'NotEnoughKeys'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    //mappings channel: 'official', version: mc_version
    mappings channel: 'parchment', version: "${parchment_version}-${mc_version}"
    //makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                nekeys {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                nekeys {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'nekeys', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                nekeys {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        name = "Vazkii Mods"
        url = "https://maven.blamejared.com"
    }
    maven {
        name = "Sonatype"
        url = "https://oss.sonatype.org/content/repositories/snapshots"
    }
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name = "Jitpack"
        url = "https://jitpack.io"
    }
}

configurations {
    include
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    /* Sphinx4 dependencies */
    minecraftLibrary group: 'edu.cmu.sphinx', name: 'sphinx4-core', version:'5prealpha-SNAPSHOT'
    minecraftLibrary group: 'edu.cmu.sphinx', name: 'sphinx4-data', version:'5prealpha-SNAPSHOT'
    include group: 'edu.cmu.sphinx', name: 'sphinx4-core', version:'5prealpha-SNAPSHOT'
    include group: 'edu.cmu.sphinx', name: 'sphinx4-data', version:'5prealpha-SNAPSHOT'

    /* Other mods */
    // Psi
    // runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:1.16.4-53.1")
    // implementation fg.deobf("vazkii.psi:Psi:1.16-95.413")
    // Latest 1.18 version of Controlling
    // runtimeOnly fg.deobf('curse.maven:Controlling-250398:3950209')
}

task replaceResources(type: Copy) {
    outputs.upToDateWhen { false }
    from(sourceSets.main.resources) {
        include "META-INF/mods.toml"
        expand "version": mod_version, "mc_version": mc_version, "loader_version": loader_version
    }
    into "$buildDir/resources/main/"
}

processResources {
    //Exclude the mods.toml file as we manually handle that and don't want it to invalidate our cache
    exclude 'META-INF/mods.toml'
    finalizedBy replaceResources
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    from('LICENSE')
    from('SPHINX.LICENSE')

    manifest {
        attributes([
                "Specification-Title"     : "nekeys",
                "Specification-Vendor"    : "Timor Morrien",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.version,
                "Implementation-Vendor"   : "Timor Morrien",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

shadowJar {
    archiveClassifier.set('')
    configurations = [project.configurations.include]
}

jar.finalizedBy("reobfJar")
jar.finalizedBy("shadowJar")
